################################################################################
#   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved
#
#   Licensed under the Apache License, Version 2.0 (the \"License\");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an \"AS IS\" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
################################################################################

openapi: 3.0.0
info:
  description: This is to retrieve details from the rest api to the UI.
  version: "1.0.0"
  title: Cluster Aware MI Dashboard
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: "login"
    description: "Login Management"
  - name: "logout"
    description: "Logout Management"
  - name: "heartbeat"
    description: "Heartbeat Management"
  - name: "configs"
    description: "Access dashboard configs"
  - name: "groups"
    description: "Access group list"
  - name: "nodes"
    description: "Access nodes details"
  - name: "proxyServices"
    description: "Access proxy services details"
  - name: "registryResources"
    description: "Access registry resources details"
  - name: "endpoints"
    description: "Access endpoints details"
  - name: "inboundEndpoints"
    description: "Access inbound endpoints details"
  - name: "messageProcessors"
    description: "Access message processors details"
  - name: "messageStores"
    description: "Access message stores details"
  - name: "apis"
    description: "Access APIs details"
  - name: "templates"
    description: "Access templates details"
  - name: "sequences"
    description: "Access sequences details"
  - name: "tasks"
    description: "Access tasks details"
  - name: "localEntries"
    description: "Access local entries details"
  - name: "data-services"
    description: "Access data services details"
  - name: "datasources"
    description: "Access datasources details"
  - name: "connectors"
    description: "Access connectors details"
  - name: "carbonApplications"
    description: "Access carbon applications details"
  - name: "logFiles"
    description: "Access log files details"
  - name: "logConfigs"
    description: "Access log configs details"
  - name: "Users"
    description: "Access users details"
  - name: "Roles"
    description: "Access roles details"
  - name: "configuration"
    description: "Access configurations"
  - name: "services"
    description: "Access services details"
  - name: "listeners"
    description: "Access listeners details"

paths:
  /login:
    post:
      tags:
        - "login"
      summary: "Receive logins to the dashboard"
      operationId: "ReceiveLogin"
      requestBody:
        $ref: '#/components/requestBodies/Login'
      responses:
        '200':
          description: "Login successful"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /logout:
    get:
      security:
        - bearerAuth: []
      tags:
        - "logout"
      summary: "Receive logouts to the dashboard"
      operationId: "ReceiveLogout"
      responses:
        200:
          description: "Logout successful"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /heartbeat:
    post:
      tags:
        - "heartbeat"
      summary: "Receive heartbeats from nodes"
      operationId: "ReceiveNodeHeartbeat"
      requestBody:
        $ref: '#/components/requestBodies/Heartbeat'
      responses:
        200:
          description: "Receive node heartbeats"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /configs/super-admin:
    get:
      tags:
        - "configs"
      summary: "Get super admin username"
      operationId: "getSuperAdmin"
      responses:
        200:
          description: "The super admin details configured in dashboard configs"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuperAdminUser'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups:
    get:
      tags:
        - "groups"
      summary: "Get set of groups"
      operationId: "RetrieveGroups"
      responses:
        200:
          description: "The list of groups registered to dashboard"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupList'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/nodes:
    get:
      tags:
        - "nodes"
      summary: "Get set of nodes in the group"
      operationId: "RetrieveNodesByGroupId"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "The paginated list of nodes in group"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesResourceResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/nodes/{product-id}:
    get:
      tags:
        - "nodes"
      summary: "Get all nodes in the group based on product"
      operationId: "retrieveAllNodesByGroupIdByProductId"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "product-id"
          in: path
          description: "Product ID"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "The list of nodes in group based on product"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeList'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/all-nodes:
    get:
      tags:
        - "nodes"
      summary: "Get all nodes in the group"
      operationId: "RetrieveAllNodesByGroupId"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "The list of nodes in group"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeList'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/{group-id}/proxy-services:
    get:
      tags:
        - "proxyServices"
      summary: "Get proxy services by node ids"
      operationId: "getProxyServicesByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "nodes"
          in: query
          description: "ID/IDs of the nodes"
          required: true
          schema:
            type: array
            items:
              type: string
              default: all
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string 
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string     
      responses:
        200:
          description: "Response object containing paginated list of resulting Proxy Services and the count of search results, deployed in provided nodes"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactsResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - "proxyServices"
      summary: "Update proxy service"
      operationId: "updateProxyService"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/ArtifactUpdate'
      responses:
        200:
          description: "Proxy update status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/registry-resources:
    get:
      tags:
        - "registryResources"
      summary: "Get registryResources services"
      operationId: "getRegistryResourcesByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "path"
          in: query
          description: "Path of the registry directory/file"
          required: true
          schema:
            type: string
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string 
      responses:
        200:
          description: "Response object containing paginated list of resulting Registry Resources and the count of search results, deployed in provided nodes"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/registry-resources/content:
    get:
      tags:
        - "registryResources"
      summary: "Get registry resource content"
      operationId: "getRegistryContent"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "path"
          in: query
          description: "Path of the registry directory/file"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Get registry resource file content"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/endpoints:
    get:
      tags:
        - "endpoints"
      summary: "Get endpoints by node ids"
      operationId: "getEndpointsByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "nodes"
          in: query
          description: "ID/IDs of the nodes"
          required: true
          schema:
            type: array
            items:
              type: string
              default: all
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string 
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string     
      responses:
        200:
          description: "Response object containing paginated list of resulting Endpoints and the count of search results, deployed in provided nodes"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactsResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - "endpoints"
      summary: "Update endpoint"
      operationId: "updateEndpoint"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/ArtifactUpdate'
      responses:
        200:
          description: "Endpoint update status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/services:
    get:
      tags:
        - "services"
      summary: "Get services by node ids"
      operationId: "getServicesByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "nodes"
          in: query
          description: "ID/IDs of the nodes"
          required: true
          schema:
            type: array
            items:
              type: string
              default: all
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Response object containing paginated list of resulting Services and the count of search results, deployed in provided nodes"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactsResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/listeners:
    get:
      tags:
        - "listeners"
      summary: "Get listeners by node ids"
      operationId: "getListenersByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "nodes"
          in: query
          description: "ID/IDs of the nodes"
          required: true
          schema:
            type: array
            items:
              type: string
              default: all
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Response object containing paginated list of resulting Services and the count of search results, deployed in provided nodes"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactsResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/inbound-endpoints:
    get:
      tags:
        - "inboundEndpoints"
      summary: "Get inbound endpoints by node ids"
      operationId: "getInboundEpsByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "nodes"
          in: query
          description: "ID/IDs of the nodes"
          required: true
          schema:
            type: array
            items:
              type: string
              default: all
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string 
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string     
      responses:
        200:
          description: "Response object containing paginated list of resulting Inbund Endpoints and the count of search results, deployed in provided nodes"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactsResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - "inboundEndpoints"
      summary: "Update inbound endpoint"
      operationId: "updateInboundEp"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/ArtifactUpdate'
      responses:
        200:
          description: "Inbound endpoint update status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/message-processors:
    get:
      tags:
        - "messageProcessors"
      summary: "Get message processors by node ids"
      operationId: "getMessageProcessorsByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "nodes"
          in: query
          description: "ID/IDs of the nodes"
          required: true
          schema:
            type: array
            items:
              type: string
              default: all
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string 
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string     
      responses:
        200:
          description: "Response object containing paginated list of resulting Message Processors and the count of search results, deployed in provided nodes"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactsResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - "messageProcessors"
      summary: "Update message processor"
      operationId: "updateMessageProcessor"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/ArtifactUpdate'
      responses:
        200:
          description: "Message processor update status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/message-stores:
    get:
      tags:
        - "messageStores"
      summary: "Get message stores by node ids"
      operationId: "getMessageStoresByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "nodes"
          in: query
          description: "ID/IDs of the nodes"
          required: true
          schema:
            type: array
            items:
              type: string
              default: all
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string 
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string     
      responses:
        200:
          description: "Response object containing paginated list of resulting Message Stores and the count of search results, deployed in provided nodes"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactsResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/apis:
    get:
      tags:
        - "apis"
      summary: "Get APIs by node ids"
      operationId: "getApisByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "nodes"
          in: query
          description: "ID/IDs of the nodes"
          required: true
          schema:
            type: array
            items:
              type: string
              default: all
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string 
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string     
      responses:
        200:
          description: "Response object containing paginated list of resulting APIs and the count of search results, deployed in provided nodes"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactsResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - "apis"
      summary: "Update API"
      operationId: "updateApi"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/ArtifactUpdate'
      responses:
        200:
          description: "API update status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/templates:
    get:
      tags:
        - "templates"
      summary: "Get templates by node ids"
      operationId: "getTemplatesByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "nodes"
          in: query
          description: "ID/IDs of the nodes"
          required: true
          schema:
            type: array
            items:
              type: string
              default: all
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string 
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string     
      responses:
        200:
          description: "Response object containing paginated list of resulting Templates and the count of search results, deployed in provided nodes"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactsResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/sequences:
    get:
      tags:
        - "sequences"
      summary: "Get sequences by node ids"
      operationId: "getSequencesByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "nodes"
          in: query
          description: "ID/IDs of the nodes"
          required: true
          schema:
            type: array
            items:
              type: string
              default: all
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string 
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string     
      responses:
        200:
          description: "Response object containing paginated list of resulting Sequences and the count of search results, deployed in provided nodes"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactsResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - "sequences"
      summary: "Update sequence"
      operationId: "updateSequence"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/ArtifactUpdate'
      responses:
        200:
          description: "Sequence update status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/tasks:
    get:
      tags:
        - "tasks"
      summary: "Get tasks by node ids"
      operationId: "getTasksByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "nodes"
          in: query
          description: "ID/IDs of the nodes"
          required: true
          schema:
            type: array
            items:
              type: string
              default: all
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string 
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string     
      responses:
        200:
          description: "Response object containing paginated list of resulting Tasks and the count of search results, deployed in provided nodes"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactsResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/local-entries:
    get:
      tags:
        - "localEntries"
      summary: "Get local entries by node ids"
      operationId: "getLocalEntriesByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "nodes"
          in: query
          description: "ID/IDs of the nodes"
          required: true
          schema:
            type: array
            items:
              type: string
              default: all
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string 
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string     
      responses:
        200:
          description: "Response object containing paginated list of resulting Local Entries and the count of search results, deployed in provided nodes"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactsResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/nodes/{node-id}/local-entries/{local-entry}/value:
    get:
      tags:
        - "localEntries"
      summary: "Get value of local entry"
      operationId: "getLocalEntryValue"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "node-id"
          in: path
          description: "Node id"
          required: true
          schema:
            type: string
        - name: "local-entry"
          in: path
          description: "Local entry name"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Value of the local entry"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalEntryValue'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/data-services:
    get:
      tags:
        - "data-services"
      summary: "Get data-services by node ids"
      operationId: "getDataServicesByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "nodes"
          in: query
          description: "ID/IDs of the nodes"
          required: true
          schema:
            type: array
            items:
              type: string
              default: all
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string 
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string     
      responses:
        200:
          description: "Response object containing paginated list of resulting Data Services and the count of search results, deployed in provided nodes"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactsResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/datasources:
    get:
      tags:
        - "datasources"
      summary: "Get datasources by node ids"
      operationId: "getDatasourcesByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "nodes"
          in: query
          description: "ID/IDs of the nodes"
          required: true
          schema:
            type: array
            items:
              type: string
              default: all
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string 
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string     
      responses:
        200:
          description: "Response object containing paginated list of resulting Data Sources and the count of search results, deployed in provided nodes"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactsResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/connectors:
    get:
      tags:
        - "connectors"
      summary: "Get connectors by node ids"
      operationId: "getConnectorsByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "nodes"
          in: query
          description: "ID/IDs of the nodes"
          required: true
          schema:
            type: array
            items:
              type: string
              default: all
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string 
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string     
      responses:
        200:
          description: "Response object containing paginated list of resulting Connectors and the count of search results, deployed in provided nodes"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactsResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/capps:
    get:
      tags:
        - "carbonApplications"
      summary: "Get carbon applications by node ids"
      operationId: "getCarbonApplicationsByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "nodes"
          in: query
          description: "ID/IDs of the nodes"
          required: true
          schema:
            type: array
            items:
              type: string
              default: all
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string 
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string     
      responses:
        200:
          description: "Response object containing paginated list of resulting Carbon Apps and the count of search results, deployed in provided nodes"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactsResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/nodes/{node-id}/capps/{capp-name}/artifacts:
    get:
      tags:
        - "carbonApplications"
      summary: "Get artifact list of carbon application by node id"
      operationId: "getCarbonApplicationArtifactsByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "node-id"
          in: path
          description: "Node ID"
          required: true
          schema:
            type: string
        - name: "capp-name"
          in: path
          description: "Carbon application name"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "List of artifacts in carbon applications deployed in provided nodes"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CAppArtifacts'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/logs:
    get:
      tags:
        - "logFiles"
      summary: "Get log files by node ids"
      operationId: "getLogFilesByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "nodes"
          in: query
          description: "ID/IDs of the nodes"
          required: true
          schema:
            type: array
            items:
              type: string
              default: all
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string 
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string     
      responses:
        200:
          description: "Response object containing paginated list of resulting Log Files and the count of search results, deployed in provided group"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/nodes/{node-id}/logs/{file-name}:
    get:
      tags:
        - "logFiles"
      summary: "Get log content"
      operationId: "getLogContent"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "file-name"
          in: path
          description: "Log file name"
          required: true
          schema:
            type: string
        - name: "node-id"
          in: path
          description: "Node id of the file"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Get log file content."
          content:
            text/plain:
              schema:
                type: string
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/log-configs/nodes/{node-id}:
    get:
      tags:
        - "logConfigs"
      summary: "Get log configs by node id"
      operationId: "getLogConfigsByNodeIds"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "node-id"
          in: path
          description: "NodeId"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "List of log configs in provided node id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogConfigs'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - "logConfigs"
      summary: "Update log level by nodeId"
      operationId: "updateLogLevelByNodeId"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "node-id"
          in: path
          description: "NodeId"
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdateLogger'
      responses:
        200:
          description: "Logger update status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessStatus'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/log-configs:
    get:
      tags:
        - "logConfigs"
      summary: "Get log configs"
      operationId: "getLogConfigs"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string 
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string     
      responses:
        200:
          description: "Response object containing paginated list of resulting Log Files and the count of search results, deployed in provided group"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogConfigsResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - "logConfigs"
      summary: "Add logger"
      operationId: "addLogger"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/AddLogger'
      responses:
        200:
          description: "Logger insert status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessStatus'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - "logConfigs"
      summary: "Update log level"
      operationId: "updateLogLevel"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdateLogger'
      responses:
        200:
          description: "Logger update status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessStatus'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/{group-id}/users:
    get:
      tags:
        - "Users"
      summary: "Get users"
      operationId: "getUsers"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID"
          required: true
          schema:
            type: string
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string 
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string     
      responses:
        200:
          description: "Response object containing paginated list of resulting Users and the count of search results, deployed in provided group"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - "Users"
      summary: "Add user"
      operationId: "addUser"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/AddUser'
      responses:
        200:
          description: "User insert status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessStatus'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/users/{user-id}:
    delete:
      tags:
        - "Users"
      summary: "Delete user"
      operationId: "deleteUser"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID"
          required: true
          schema:
            type: string
        - name: "user-id"
          in: path
          description: "User ID"
          required: true
          schema:
            type: string
        - name: "domain"
          in: query
          description: "domain name"
          required: false
          schema:
            type: string
      responses:
        200:
          description: "User deletion status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessStatus'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/all-roles:
    get:
      tags:
        - "Roles"
      summary: "Get All roles"
      operationId: "getAllRoles"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID"
          required: true
          schema:
            type: string  
      responses:
        200:
          description: "Response object containing all Roles and the count in the provided group"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/roles:
    get:
      tags:
        - "Roles"
      summary: "Get roles"
      operationId: "getRoles"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID"
          required: true
          schema:
            type: string
        - name: "searchKey"
          in: query
          description: "Search key"
          required: false
          schema:
            type: string
        - name: "lowerLimit"
          in: query
          description: "Lower Limit"
          required: true
          schema:
            type: string
        - name: "upperLimit"
          in: query
          description: "Upper Limit"
          required: true
          schema:
            type: string
        - name: "order"
          in: query
          description: "Order"
          required: false
          schema:
            type: string
        - name: "orderBy"
          in: query
          description: "Order By"
          required: false
          schema:
            type: string 
        - name: "isUpdate"
          in: query
          description: "Whether it is an update"
          required: true
          schema:
            type: string     
      responses:
        200:
          description: "Response object containing paginated list of resulting Roles and the count of search results, deployed in provided group"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesResourceResponse'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - "Roles"
      summary: "Add role"
      operationId: "addRole"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/AddRole'
      responses:
        200:
          description: "Role insert status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessStatus'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - "Roles"
      summary: "Update role"
      operationId: "updateRole"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID of the node"
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdateRole'
      responses:
        200:
          description: "Role update status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessStatus'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group-id}/roles/{role-name}:
    delete:
      tags:
        - "Roles"
      summary: "Delete role"
      operationId: "deleteRole"
      parameters:
        - name: "group-id"
          in: path
          description: "Group ID"
          required: true
          schema:
            type: string
        - name: "role-name"
          in: path
          description: "Role Name"
          required: true
          schema:
            type: string
        - name: "domain"
          in: query
          description: "domain name"
          required: false
          schema:
            type: string
      responses:
        200:
          description: "Role deletion status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessStatus'
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /configuration:
    get:
      tags:
        - "configuration"
      summary: "Get configurations using management api"
      operationId: "RetrieveConfiguration"
      parameters:
        - name: "groupId"
          in: query
          description: "Group id of the node"
          required: true
          schema:
            type: string
        - name: "nodeId"
          in: query
          description: "Node id of the node"
          required: true
          schema:
            type: string
        - name: "artifactType"
          in: query
          description: "Type of the artifact"
          required: true
          schema:
            type: string
        - name: "artifactName"
          in: query
          description: "Name of the artifact"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "The configuration of the relevant artifact"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /healthz:
    get:
      tags:
        - "healthz"
      summary: "Get health check for the dashboard"
      operationId: "RetrieveHealth"
      responses:
        200:
          description: "Health check status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthz'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      example:
        username: admin
        password: admin
    HeartbeatRequest:
      type: object
      properties:
        product :
          type: string
        groupId:
          type: string
        nodeId:
          type: string
        interval:
          type: integer
        mgtApiUrl:
          type: string
      example: {type: mi, groupId: mi_dev, nodeId: node_01, interval: 30, mgtApiUrl: https://10.100.0.64:9164/management/}

    SuperAdminUser:
      type: object
      properties:
        username:
          type: string
    Ack:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
      example: {status: success, message: Successfully updated}

    GroupList:
      type: array
      items:
        type: string
      example: [group_01, group_02]

    NodeList:
      type: array
      items:
        type: object
        properties:
          nodeId:
            type: string
            description: "node id."
          status:
            type: string
          details:
            type: string
            description: String contains role, upTime, serverName, serverVersion, miHome, javaHome, javaVersion, javaVendor, osName
      example: [{ nodeId: node_01,
                  details: {\"productVersion\":\"1.2.0\",\"osVersion\":\"10.15.7\",\"javaVersion\":\"1.8.0_191\"}
                }]
    NodesResourceResponse:
      type: object
      properties: 
        count: 
          type: integer
        resourceList:
          type: array
          $ref: '#/components/schemas/NodeList'
                  
    ArtifactDetails:
      type: object
      properties:
        nodeId:
          type: string
        details:
          type: string

    Artifacts:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                nodes:
                  type: array
                  items:
                    $ref: '#/components/schemas/ArtifactDetails'
    ArtifactsResourceResponse:
      type: object
      properties:
        count: 
          type: integer
        resourceList: 
          type: array
          $ref: '#/components/schemas/Artifacts'

    CAppArtifacts:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          type:
            type: string
    ArtifactUpdateRequest:
      type: object
      properties:
        artifactName:
          type: string
        nodeId:
          type: string
        type:
          type: string
        value:
          type: boolean
    DatasourceList:
      type: array
      items:
        type: object
        properties:
          datasourceName:
            type: string
          nodes:
            type: array
            items:
              type: object
              properties:
                nodeId:
                  type: string
                details:
                  type: array
                  description: Array contains type, status, description, datsource provider, database engine, driver, url, username etc
                  items:
                    $ref: '#/components/schemas/KeyValue'
                configParameters:
                  type: array
                  description: Array contains default auto commit, default read only, test on borrow, test on return, test while idle etc.
                  items:
                    $ref: '#/components/schemas/KeyValue'

    RegistryArtifacts:
      type: array
      items:
        type: object
        properties:
          childName:
            type: string
          mediaType:
            type: string
          properties:
            type: array
            items:
              $ref: '#/components/schemas/RegistryProperty'
    RegistryProperty:
      type: object
      properties:
        propertyName:
          type: string
        propertyValue:
          type: string
    RegistryResourceResponse:
      type: object
      properties:
        count: 
          type: integer
        resourceList: 
          type: array
          $ref: '#/components/schemas/RegistryArtifacts'
    LogList:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          nodes:
            type: array
            items:
              $ref: '#/components/schemas/LogDetail'
    LogsResourceResponse:
      type: object
      properties:
        count: 
          type: integer
        resourceList: 
          type: array
          $ref: '#/components/schemas/LogList'
    LogDetail:
      type: object
      properties:
        nodeId:
          type: string
        logSize:
          type: string
    LogConfigDetail:
      type: object
      properties:
        nodeId:
          type: string
        level:
          type: string
    LogConfigs:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          componentName:
            type: string
          nodes:
            type: array
            items:
              $ref: '#/components/schemas/LogConfigDetail'
    LogConfigsResourceResponse:
      type: object
      properties:
        count: 
          type: integer
        resourceList: 
          type: array
          $ref: '#/components/schemas/LogConfigs'
        
    LogConfigAddRequest:
      type: object
      properties:
        name:
          type: string
        loggerClass:
          type: string
        level:
          type: string
    LogConfigUpdateRequest:
      type: object
      properties:
        name:
          type: string
        level:
          type: string
    Users:
      type: array
      items:
        type: object
        properties:
          userId:
            type: string
          details:
            type: string
    UsersResourceResponse:
      type: object
      properties:
        count: 
          type: integer
        resourceList: 
          type: array
          $ref: '#/components/schemas/Users'
    RoleList:
      type: array
      items:
        type: object
        properties:
          roleName:
            type: string
          details:
            type: string     
    RolesResourceResponse:
      type: object
      properties:
        count: 
          type: integer
        resourceList: 
          type: array
          $ref: '#/components/schemas/RoleList'
    AddUserRequest:
      type: object
      properties:
        userId:
          type: string
        domain:
          type: string
        password:
          type: string
        isAdmin:
          type: boolean
    AddRoleRequest:
      type: object
      properties:
        roleName:
          type: string
        domain:
          type: string
    UpdateRoleRequest:
      type: object
      properties:
        userId:
          type: string
        removedRoles:
          type: array
          items:
            type: string
        addedRoles:
          type: array
          items:
            type: string
    KeyValue:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    KeyValueAsArray:
      type: object
      properties:
        key:
          type: string
        value:
          type: array
          items:
            type: string
    Configuration:
      type: object
      properties:
        configuration:
          type: string
    healthz:
      type: object
      properties:
        status:
          type: string
    LocalEntryValue:
      type: object
      properties:
        value:
          type: string
    SuccessStatus:
      type: object
      properties:
        success:
          type: boolean
          description: "Success status"
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      example:
        {code: 500, message: Internal server error}
    UnauthorizedError:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      example:
        code: 401
        message: Unauthorized
    Token:
      type: object
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
      example:
        access_token: 2YotnFZFEjr1zCsicMWpAA
        expires_in: 3600
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  requestBodies:
    Login:
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/LoginRequest'
      description: "The request body to login."
    Heartbeat:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HeartbeatRequest'
      description: "The request body to update proxy."

    ArtifactUpdate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArtifactUpdateRequest'
      description: "The request body to update artifact."
    AddLogger:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LogConfigAddRequest'
      description: "The request body to add logger."
    UpdateLogger:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LogConfigUpdateRequest'
      description: "The request body to add logger."
    AddUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddUserRequest'
      description: "The request body to add user."
    AddRole:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddRoleRequest'
      description: "The request body to add role."
    UpdateRole:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateRoleRequest'
      description: "The request body to update role."
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/a2294/MI_Dashboard/1.0.0
